#!/usr/bin/env node

const app = require('../src');
const http = require('http');
const debug = require('debug')('http')
const config = require('../src/config');

const server = http.createServer(app);
let port = null;

function normalizePort(val) {
  const portNo = parseInt(val, 10);

  if (Number.isNaN(portNo)) {
    // named pipe
    return val;
  }

  if (portNo >= 0) {
    // port number
    return portNo;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
